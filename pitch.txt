L'idea è un gioco real time strategy in cui si massimizza il numero di unità mantenedo gli aspetti rts.

Con aspetti rts intendo:
Le entità controllabili dal giocatore sono edifici e unità.
Gli edifici servono a collezionare risorse, produrre unità e potenziamenti.
Le unità servono a raccogliere risorse, combattere unità avversarie e distruggere edifici.
La modalità di vittoria è o uccidere un unità / edificio particolare nemico, oppure tutte le entità nemiche.
Il modo di comandare le unità è prima selezione (box o click) e poi ordine di movimento.
Le unità effettuano pathfinding e target selection autonomamente.

Ambisco a sviluppare il gioco con una capacità di ~10k di unità simultaneamente.
Per gestire il numero di unità serve automatizzare l'assegnazione di ordini. Ho pensato a frecce permanenti che assegnano ordini ad unità all'interno di un area.
Inoltre gli ordini di raccolta di risorse saranno creati automaticamente.
Per renderizzare così tante unità sarà necessario o una grafica 2d o una pipeline 3d ottimizzata.
Per il singleplayer sarà necessario creare un'ai che sia in grado di gestire i sistemi di un rts classico più i sistemi di automazione aggiunti. Credo che serva quindi descrivere lo stato del gioco in maniera adatta (non so come) per generare e valutare le mosse possibili.
Per rendere il multiplayer possibile sarà necessario usare un sistema lockstep (peer to peer, vengono sincronizzati solo i comandi dei giocatori, le simulazioni sono locali, in parallelo e vengono sincronizzate solo quando il checksum è diverso).

Non focalizzo l'attenzione sulla parte di asset artistici (come disegni, modelli 3d, design interfacce) e storia.

Non ho specificato dettagli sul design, non so se limitarmi a fare una tech demo o un gioco completo con uno studio per renderlo divertente e bilanciato.
So quanto tempo richieda il design e l'implementazione della tech demo (tanto) e intendo svilupparla in C o C++.
Non so quanto richieda il game design come estetica.